# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:39:01+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Query
from pydantic import constr

from models import (
    Action,
    Action4,
    Action8,
    Action12,
    Action16,
    Action20,
    Action24,
    Action28,
    Action32,
    Action36,
    Action40,
    Action44,
    Action48,
    Action52,
    Action56,
    Action60,
    Action64,
    Action68,
    Action72,
    Action76,
    Action80,
    Action84,
    Action88,
    Action92,
    Action96,
    Action100,
    Action104,
    Action108,
    Action112,
    Action116,
    Action120,
    Action124,
    Action128,
    Action132,
    Action136,
    Action140,
    Action144,
    Action148,
    Action152,
    Action156,
    Action160,
    Action164,
    Action168,
    Action172,
    Action176,
    Action180,
    Action184,
    Action188,
    Action192,
    Action196,
    Action200,
    Action204,
    Action208,
    AddSourceIdentifierToSubscriptionResult,
    ApplyPendingMaintenanceActionResult,
    AuthorizationNotFoundFault,
    AvailabilityZones,
    CertificateMessage,
    CertificateNotFoundFault,
    CloudwatchLogsExportConfiguration,
    CopyDBClusterParameterGroupResult,
    CopyDBClusterSnapshotResult,
    CreateDBClusterParameterGroupResult,
    CreateDBClusterResult,
    CreateDBClusterSnapshotResult,
    CreateDBInstanceResult,
    CreateDBSubnetGroupResult,
    CreateEventSubscriptionResult,
    CreateGlobalClusterResult,
    DBClusterAlreadyExistsFault,
    DBClusterMessage,
    DBClusterNotFoundFault,
    DBClusterParameterGroupDetails,
    DBClusterParameterGroupNameMessage,
    DBClusterParameterGroupNotFoundFault,
    DBClusterParameterGroupsMessage,
    DBClusterQuotaExceededFault,
    DBClusterSnapshotAlreadyExistsFault,
    DBClusterSnapshotMessage,
    DBClusterSnapshotNotFoundFault,
    DBEngineVersionMessage,
    DBInstanceAlreadyExistsFault,
    DBInstanceMessage,
    DBInstanceNotFoundFault,
    DBParameterGroupAlreadyExistsFault,
    DBParameterGroupNotFoundFault,
    DBParameterGroupQuotaExceededFault,
    DBSecurityGroupNotFoundFault,
    DBSnapshotAlreadyExistsFault,
    DBSnapshotNotFoundFault,
    DBSubnetGroupAlreadyExistsFault,
    DBSubnetGroupDoesNotCoverEnoughAZs,
    DBSubnetGroupMessage,
    DBSubnetGroupNotFoundFault,
    DBSubnetGroupQuotaExceededFault,
    DBSubnetQuotaExceededFault,
    DBUpgradeDependencyFailureFault,
    DeleteDBClusterResult,
    DeleteDBClusterSnapshotResult,
    DeleteDBInstanceResult,
    DeleteEventSubscriptionResult,
    DeleteGlobalClusterResult,
    DescribeDBClusterSnapshotAttributesResult,
    DescribeEngineDefaultClusterParametersResult,
    EnableCloudwatchLogsExports,
    EventCategories,
    EventCategoriesMessage,
    EventsMessage,
    EventSubscriptionQuotaExceededFault,
    EventSubscriptionsMessage,
    FailoverDBClusterResult,
    Filters,
    GlobalClusterAlreadyExistsFault,
    GlobalClusterNotFoundFault,
    GlobalClusterQuotaExceededFault,
    GlobalClustersMessage,
    InstanceQuotaExceededFault,
    InsufficientDBClusterCapacityFault,
    InsufficientDBInstanceCapacityFault,
    InsufficientStorageClusterCapacityFault,
    InvalidDBClusterSnapshotStateFault,
    InvalidDBClusterStateFault,
    InvalidDBInstanceStateFault,
    InvalidDBParameterGroupStateFault,
    InvalidDBSecurityGroupStateFault,
    InvalidDBSnapshotStateFault,
    InvalidDBSubnetGroupStateFault,
    InvalidDBSubnetStateFault,
    InvalidEventSubscriptionStateFault,
    InvalidGlobalClusterStateFault,
    InvalidRestoreFault,
    InvalidSubnet,
    InvalidVPCNetworkStateFault,
    KMSKeyNotAccessibleFault,
    ModifyDBClusterResult,
    ModifyDBClusterSnapshotAttributeResult,
    ModifyDBInstanceResult,
    ModifyDBSubnetGroupResult,
    ModifyEventSubscriptionResult,
    ModifyGlobalClusterResult,
    OrderableDBInstanceOptionsMessage,
    Parameters,
    PendingMaintenanceActionsMessage,
    RebootDBInstanceResult,
    RemoveFromGlobalClusterResult,
    RemoveSourceIdentifierFromSubscriptionResult,
    ResourceNotFoundFault,
    RestoreDBClusterFromSnapshotResult,
    RestoreDBClusterToPointInTimeResult,
    SharedSnapshotQuotaExceededFault,
    SnapshotQuotaExceededFault,
    SNSInvalidTopicFault,
    SNSNoAuthorizationFault,
    SNSTopicArnNotFoundFault,
    SourceIds,
    SourceNotFoundFault,
    SourceType,
    StartDBClusterResult,
    StopDBClusterResult,
    StorageQuotaExceededFault,
    StorageTypeNotSupportedFault,
    SubnetAlreadyInUse,
    SubnetIds,
    SubscriptionAlreadyExistFault,
    SubscriptionCategoryNotFoundFault,
    SubscriptionNotFoundFault,
    TagKeys,
    TagListMessage,
    Tags,
    ValuesToAdd,
    ValuesToRemove,
    Version,
    VpcSecurityGroupIds,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description='Amazon DocumentDB API documentation',
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='Amazon DocumentDB with MongoDB compatibility',
    version='2014-10-31',
    servers=[
        {
            'description': 'The Amazon DocDB multi-region endpoint',
            'url': 'http://rds.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The Amazon DocDB multi-region endpoint',
            'url': 'https://rds.{region}.amazonaws.com',
            'variables': {
                'region': {
                    'default': 'us-east-1',
                    'description': 'The AWS region',
                    'enum': [
                        'us-east-1',
                        'us-east-2',
                        'us-west-1',
                        'us-west-2',
                        'us-gov-west-1',
                        'us-gov-east-1',
                        'ca-central-1',
                        'eu-north-1',
                        'eu-west-1',
                        'eu-west-2',
                        'eu-west-3',
                        'eu-central-1',
                        'eu-south-1',
                        'af-south-1',
                        'ap-northeast-1',
                        'ap-northeast-2',
                        'ap-northeast-3',
                        'ap-southeast-1',
                        'ap-southeast-2',
                        'ap-east-1',
                        'ap-south-1',
                        'sa-east-1',
                        'me-south-1',
                    ],
                }
            },
        },
        {
            'description': 'The general Amazon DocDB multi-region endpoint',
            'url': 'http://rds.amazonaws.com',
            'variables': {},
        },
        {
            'description': 'The general Amazon DocDB multi-region endpoint',
            'url': 'https://rds.amazonaws.com',
            'variables': {},
        },
        {
            'description': 'The Amazon DocDB endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://rds.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The Amazon DocDB endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://rds.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.get(
    '/#Action=AddSourceIdentifierToSubscription',
    description=""" Adds a source identifier to an existing event notification subscription. """,
    tags=[
        'subscription_management',
        'event_subscription_management',
        'global_cluster_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__add_source_identifier_to_subscription(
    subscription_name: str = Query(..., alias='SubscriptionName'),
    source_identifier: str = Query(..., alias='SourceIdentifier'),
    action: Action = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=AddSourceIdentifierToSubscription',
    description=""" Adds a source identifier to an existing event notification subscription. """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__add_source_identifier_to_subscription(
    action: Action = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=AddTagsToResource',
    description=""" Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a <code>Condition</code> statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB. """,
    tags=['resource_tagging', 'tag_management', 'resource_tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__add_tags_to_resource(
    resource_name: str = Query(..., alias='ResourceName'),
    tags: Tags = Query(..., alias='Tags'),
    action: Action4 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=AddTagsToResource',
    description=""" Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a <code>Condition</code> statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB. """,
    tags=['maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__add_tags_to_resource(
    action: Action4 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ApplyPendingMaintenanceAction',
    description=""" Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance). """,
    tags=['subscription_management', 'tag_management', 'resource_tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__apply_pending_maintenance_action(
    resource_identifier: str = Query(..., alias='ResourceIdentifier'),
    apply_action: str = Query(..., alias='ApplyAction'),
    opt_in_type: str = Query(..., alias='OptInType'),
    action: Action8 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ApplyPendingMaintenanceAction',
    description=""" Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance). """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__apply_pending_maintenance_action(
    action: Action8 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CopyDBClusterParameterGroup',
    description=""" Copies the specified cluster parameter group. """,
    tags=[
        'database_management',
        'db_cluster_parameter_management',
        'db_cluster_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__copy_d_b_cluster_parameter_group(
    source_d_b_cluster_parameter_group_identifier: str = Query(
        ..., alias='SourceDBClusterParameterGroupIdentifier'
    ),
    target_d_b_cluster_parameter_group_identifier: str = Query(
        ..., alias='TargetDBClusterParameterGroupIdentifier'
    ),
    target_d_b_cluster_parameter_group_description: str = Query(
        ..., alias='TargetDBClusterParameterGroupDescription'
    ),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action12 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CopyDBClusterParameterGroup',
    description=""" Copies the specified cluster parameter group. """,
    tags=['event_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__copy_d_b_cluster_parameter_group(
    action: Action12 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CopyDBClusterSnapshot',
    description=""" <p>Copies a snapshot of a cluster.</p> <p>To copy a cluster snapshot from a shared manual cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region.</p> <p>To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that cluster snapshot is in the <i>copying</i> status.</p> """,
    tags=[
        'db_cluster_snapshot_management',
        'db_cluster_management',
        'resource_tagging',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__copy_d_b_cluster_snapshot(
    source_d_b_cluster_snapshot_identifier: str = Query(
        ..., alias='SourceDBClusterSnapshotIdentifier'
    ),
    target_d_b_cluster_snapshot_identifier: str = Query(
        ..., alias='TargetDBClusterSnapshotIdentifier'
    ),
    kms_key_id: Optional[str] = Query(None, alias='KmsKeyId'),
    pre_signed_url: Optional[str] = Query(None, alias='PreSignedUrl'),
    copy_tags: Optional[bool] = Query(None, alias='CopyTags'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action16 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CopyDBClusterSnapshot',
    description=""" <p>Copies a snapshot of a cluster.</p> <p>To copy a cluster snapshot from a shared manual cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code> must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region.</p> <p>To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by <code>TargetDBClusterSnapshotIdentifier</code> while that cluster snapshot is in the <i>copying</i> status.</p> """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__copy_d_b_cluster_snapshot(
    action: Action16 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateDBCluster',
    description=""" Creates a new Amazon DocumentDB cluster. """,
    tags=[
        'database_management',
        'db_cluster_management',
        'global_cluster_management',
        'db_cluster_parameter_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_d_b_cluster(
    availability_zones: Optional[AvailabilityZones] = Query(
        None, alias='AvailabilityZones'
    ),
    backup_retention_period: Optional[int] = Query(None, alias='BackupRetentionPeriod'),
    d_b_cluster_identifier: str = Query(..., alias='DBClusterIdentifier'),
    d_b_cluster_parameter_group_name: Optional[str] = Query(
        None, alias='DBClusterParameterGroupName'
    ),
    vpc_security_group_ids: Optional[VpcSecurityGroupIds] = Query(
        None, alias='VpcSecurityGroupIds'
    ),
    d_b_subnet_group_name: Optional[str] = Query(None, alias='DBSubnetGroupName'),
    engine: str = Query(..., alias='Engine'),
    engine_version: Optional[str] = Query(None, alias='EngineVersion'),
    port: Optional[int] = Query(None, alias='Port'),
    master_username: Optional[str] = Query(None, alias='MasterUsername'),
    master_user_password: Optional[str] = Query(None, alias='MasterUserPassword'),
    preferred_backup_window: Optional[str] = Query(None, alias='PreferredBackupWindow'),
    preferred_maintenance_window: Optional[str] = Query(
        None, alias='PreferredMaintenanceWindow'
    ),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    storage_encrypted: Optional[bool] = Query(None, alias='StorageEncrypted'),
    kms_key_id: Optional[str] = Query(None, alias='KmsKeyId'),
    pre_signed_url: Optional[str] = Query(None, alias='PreSignedUrl'),
    enable_cloudwatch_logs_exports: Optional[EnableCloudwatchLogsExports] = Query(
        None, alias='EnableCloudwatchLogsExports'
    ),
    deletion_protection: Optional[bool] = Query(None, alias='DeletionProtection'),
    global_cluster_identifier: Optional[
        constr(pattern=r'[A-Za-z][0-9A-Za-z-:._]*', min_length=1, max_length=255)
    ] = Query(None, alias='GlobalClusterIdentifier'),
    action: Action20 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateDBCluster',
    description=""" Creates a new Amazon DocumentDB cluster. """,
    tags=['event_management', 'event_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_d_b_cluster(
    action: Action20 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateDBClusterParameterGroup',
    description=""" <p>Creates a new cluster parameter group.</p> <p>Parameters in a cluster parameter group apply to all of the instances in a cluster.</p> <p>A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the <code>default.docdb3.6</code> cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html"> create a new parameter group</a> or <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html"> copy an existing parameter group</a>, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html"> Modifying Amazon DocumentDB Cluster Parameter Groups</a>. </p> """,
    tags=[
        'database_management',
        'db_cluster_parameter_management',
        'db_cluster_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_d_b_cluster_parameter_group(
    d_b_cluster_parameter_group_name: str = Query(
        ..., alias='DBClusterParameterGroupName'
    ),
    d_b_parameter_group_family: str = Query(..., alias='DBParameterGroupFamily'),
    description: str = Query(..., alias='Description'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action24 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateDBClusterParameterGroup',
    description=""" <p>Creates a new cluster parameter group.</p> <p>Parameters in a cluster parameter group apply to all of the instances in a cluster.</p> <p>A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the <code>default.docdb3.6</code> cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html"> create a new parameter group</a> or <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html"> copy an existing parameter group</a>, modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html"> Modifying Amazon DocumentDB Cluster Parameter Groups</a>. </p> """,
    tags=['event_management', 'certificate_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_d_b_cluster_parameter_group(
    action: Action24 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateDBClusterSnapshot',
    description=""" Creates a snapshot of a cluster.  """,
    tags=[
        'db_cluster_snapshot_management',
        'db_cluster_management',
        'resource_tagging',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_d_b_cluster_snapshot(
    d_b_cluster_snapshot_identifier: str = Query(
        ..., alias='DBClusterSnapshotIdentifier'
    ),
    d_b_cluster_identifier: str = Query(..., alias='DBClusterIdentifier'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action28 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateDBClusterSnapshot',
    description=""" Creates a snapshot of a cluster.  """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_d_b_cluster_snapshot(
    action: Action28 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateDBInstance',
    description=""" Creates a new instance. """,
    tags=[
        'database_management',
        'db_instance_management',
        'db_cluster_management',
        'maintenance_action_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_d_b_instance(
    d_b_instance_identifier: str = Query(..., alias='DBInstanceIdentifier'),
    d_b_instance_class: str = Query(..., alias='DBInstanceClass'),
    engine: str = Query(..., alias='Engine'),
    availability_zone: Optional[str] = Query(None, alias='AvailabilityZone'),
    preferred_maintenance_window: Optional[str] = Query(
        None, alias='PreferredMaintenanceWindow'
    ),
    auto_minor_version_upgrade: Optional[bool] = Query(
        None, alias='AutoMinorVersionUpgrade'
    ),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    d_b_cluster_identifier: str = Query(..., alias='DBClusterIdentifier'),
    copy_tags_to_snapshot: Optional[bool] = Query(None, alias='CopyTagsToSnapshot'),
    promotion_tier: Optional[int] = Query(None, alias='PromotionTier'),
    enable_performance_insights: Optional[bool] = Query(
        None, alias='EnablePerformanceInsights'
    ),
    performance_insights_k_m_s_key_id: Optional[str] = Query(
        None, alias='PerformanceInsightsKMSKeyId'
    ),
    action: Action32 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateDBInstance',
    description=""" Creates a new instance. """,
    tags=['maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_d_b_instance(
    action: Action32 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateDBSubnetGroup',
    description=""" Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region. """,
    tags=['db_subnet_group_management', 'database_management', 'resource_tagging'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_d_b_subnet_group(
    d_b_subnet_group_name: str = Query(..., alias='DBSubnetGroupName'),
    d_b_subnet_group_description: str = Query(..., alias='DBSubnetGroupDescription'),
    subnet_ids: SubnetIds = Query(..., alias='SubnetIds'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action36 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateDBSubnetGroup',
    description=""" Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region. """,
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_d_b_subnet_group(
    action: Action36 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateEventSubscription',
    description=""" <p>Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console.</p> <p>You can specify the type of source (<code>SourceType</code>) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (<code>SourceIds</code>) that trigger the events, and you can provide a list of event categories (<code>EventCategories</code>) for events that you want to be notified of. For example, you can specify <code>SourceType = db-instance</code>, <code>SourceIds = mydbinstance1, mydbinstance2</code> and <code>EventCategories = Availability, Backup</code>.</p> <p>If you specify both the <code>SourceType</code> and <code>SourceIds</code> (such as <code>SourceType = db-instance</code> and <code>SourceIdentifier = myDBInstance1</code>), you are notified of all the <code>db-instance</code> events for the specified source. If you specify a <code>SourceType</code> but do not specify a <code>SourceIdentifier</code>, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the <code>SourceType</code> or the <code>SourceIdentifier</code>, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.</p> """,
    tags=[
        'subscription_management',
        'event_subscription_management',
        'tag_management',
        'resource_tag_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_event_subscription(
    subscription_name: str = Query(..., alias='SubscriptionName'),
    sns_topic_arn: str = Query(..., alias='SnsTopicArn'),
    source_type: Optional[str] = Query(None, alias='SourceType'),
    event_categories: Optional[EventCategories] = Query(None, alias='EventCategories'),
    source_ids: Optional[SourceIds] = Query(None, alias='SourceIds'),
    enabled: Optional[bool] = Query(None, alias='Enabled'),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    action: Action40 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateEventSubscription',
    description=""" <p>Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console.</p> <p>You can specify the type of source (<code>SourceType</code>) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (<code>SourceIds</code>) that trigger the events, and you can provide a list of event categories (<code>EventCategories</code>) for events that you want to be notified of. For example, you can specify <code>SourceType = db-instance</code>, <code>SourceIds = mydbinstance1, mydbinstance2</code> and <code>EventCategories = Availability, Backup</code>.</p> <p>If you specify both the <code>SourceType</code> and <code>SourceIds</code> (such as <code>SourceType = db-instance</code> and <code>SourceIdentifier = myDBInstance1</code>), you are notified of all the <code>db-instance</code> events for the specified source. If you specify a <code>SourceType</code> but do not specify a <code>SourceIdentifier</code>, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the <code>SourceType</code> or the <code>SourceIdentifier</code>, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.</p> """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_event_subscription(
    action: Action40 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=CreateGlobalCluster',
    description=""" <p>Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.</p> <p/> <p>You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. </p> <note> <p>This action only applies to Amazon DocumentDB clusters.</p> </note> """,
    tags=['database_management', 'global_cluster_management', 'db_cluster_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_global_cluster(
    global_cluster_identifier: constr(
        pattern=r'[A-Za-z][0-9A-Za-z-:._]*', min_length=1, max_length=255
    ) = Query(..., alias='GlobalClusterIdentifier'),
    source_d_b_cluster_identifier: Optional[str] = Query(
        None, alias='SourceDBClusterIdentifier'
    ),
    engine: Optional[str] = Query(None, alias='Engine'),
    engine_version: Optional[str] = Query(None, alias='EngineVersion'),
    deletion_protection: Optional[bool] = Query(None, alias='DeletionProtection'),
    database_name: Optional[str] = Query(None, alias='DatabaseName'),
    storage_encrypted: Optional[bool] = Query(None, alias='StorageEncrypted'),
    action: Action44 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=CreateGlobalCluster',
    description=""" <p>Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance.</p> <p/> <p>You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. </p> <note> <p>This action only applies to Amazon DocumentDB clusters.</p> </note> """,
    tags=['subscription_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_global_cluster(
    action: Action44 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteDBCluster',
    description=""" <p>Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.</p> <p/> """,
    tags=[
        'db_cluster_management',
        'db_cluster_snapshot_management',
        'snapshot_management',
        'db_cluster_restore_operations',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_d_b_cluster(
    d_b_cluster_identifier: str = Query(..., alias='DBClusterIdentifier'),
    skip_final_snapshot: Optional[bool] = Query(None, alias='SkipFinalSnapshot'),
    final_d_b_snapshot_identifier: Optional[str] = Query(
        None, alias='FinalDBSnapshotIdentifier'
    ),
    action: Action48 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteDBCluster',
    description=""" <p>Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.</p> <p/> """,
    tags=['maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_d_b_cluster(
    action: Action48 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteDBClusterParameterGroup',
    description=""" Deletes a specified cluster parameter group. The cluster parameter group to be deleted can't be associated with any clusters. """,
    tags=[
        'db_cluster_parameter_management',
        'database_management',
        'db_cluster_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_d_b_cluster_parameter_group(
    d_b_cluster_parameter_group_name: str = Query(
        ..., alias='DBClusterParameterGroupName'
    ),
    action: Action52 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteDBClusterParameterGroup',
    description=""" Deletes a specified cluster parameter group. The cluster parameter group to be deleted can't be associated with any clusters. """,
    tags=['event_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_d_b_cluster_parameter_group(
    action: Action52 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteDBClusterSnapshot',
    description=""" <p>Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> """,
    tags=['db_cluster_snapshot_management', 'db_cluster_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_d_b_cluster_snapshot(
    d_b_cluster_snapshot_identifier: str = Query(
        ..., alias='DBClusterSnapshotIdentifier'
    ),
    action: Action56 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteDBClusterSnapshot',
    description=""" <p>Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p> <note> <p>The cluster snapshot must be in the <code>available</code> state to be deleted.</p> </note> """,
    tags=['event_subscription_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_d_b_cluster_snapshot(
    action: Action56 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteDBInstance',
    description=""" Deletes a previously provisioned instance. """,
    tags=['db_instance_management', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_d_b_instance(
    d_b_instance_identifier: str = Query(..., alias='DBInstanceIdentifier'),
    action: Action60 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteDBInstance',
    description=""" Deletes a previously provisioned instance. """,
    tags=['maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_d_b_instance(
    action: Action60 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteDBSubnetGroup',
    description=""" <p>Deletes a subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note> """,
    tags=['db_subnet_group_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_d_b_subnet_group(
    d_b_subnet_group_name: str = Query(..., alias='DBSubnetGroupName'),
    action: Action64 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteDBSubnetGroup',
    description=""" <p>Deletes a subnet group.</p> <note> <p>The specified database subnet group must not be associated with any DB instances.</p> </note> """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_d_b_subnet_group(
    action: Action64 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteEventSubscription',
    description=""" Deletes an Amazon DocumentDB event notification subscription. """,
    tags=['subscription_management', 'event_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_event_subscription(
    subscription_name: str = Query(..., alias='SubscriptionName'),
    action: Action68 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteEventSubscription',
    description=""" Deletes an Amazon DocumentDB event notification subscription. """,
    tags=['event_subscription_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_event_subscription(
    action: Action68 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DeleteGlobalCluster',
    description=""" <p>Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.</p> <note> <p>This action only applies to Amazon DocumentDB clusters.</p> </note> """,
    tags=['global_cluster_management', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__delete_global_cluster(
    global_cluster_identifier: constr(
        pattern=r'[A-Za-z][0-9A-Za-z-:._]*', min_length=1, max_length=255
    ) = Query(..., alias='GlobalClusterIdentifier'),
    action: Action72 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DeleteGlobalCluster',
    description=""" <p>Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster.</p> <note> <p>This action only applies to Amazon DocumentDB clusters.</p> </note> """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__delete_global_cluster(
    action: Action72 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeCertificates',
    description=""" Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account. """,
    tags=['certificate_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_certificates(
    certificate_identifier: Optional[str] = Query(None, alias='CertificateIdentifier'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action76 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeCertificates',
    description=""" Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account. """,
    tags=['event_subscription_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_certificates(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action76 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeDBClusterParameterGroups',
    description=""" Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list contains only the description of the specified cluster parameter group.  """,
    tags=[
        'database_management',
        'db_cluster_parameter_management',
        'db_cluster_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_d_b_cluster_parameter_groups(
    d_b_cluster_parameter_group_name: Optional[str] = Query(
        None, alias='DBClusterParameterGroupName'
    ),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action80 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeDBClusterParameterGroups',
    description=""" Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a <code>DBClusterParameterGroupName</code> parameter is specified, the list contains only the description of the specified cluster parameter group.  """,
    tags=['certificate_management', 'tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_d_b_cluster_parameter_groups(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action80 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeDBClusterParameters',
    description=""" Returns the detailed parameter list for a particular cluster parameter group. """,
    tags=['db_cluster_parameter_management', 'db_cluster_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_d_b_cluster_parameters(
    d_b_cluster_parameter_group_name: str = Query(
        ..., alias='DBClusterParameterGroupName'
    ),
    source: Optional[str] = Query(None, alias='Source'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action84 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeDBClusterParameters',
    description=""" Returns the detailed parameter list for a particular cluster parameter group. """,
    tags=['maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_d_b_cluster_parameters(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action84 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeDBClusterSnapshotAttributes',
    description=""" <p>Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When you share snapshots with other Amazon Web Services accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.</p> """,
    tags=['db_cluster_snapshot_management', 'db_cluster_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_d_b_cluster_snapshot_attributes(
    d_b_cluster_snapshot_identifier: str = Query(
        ..., alias='DBClusterSnapshotIdentifier'
    ),
    action: Action88 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeDBClusterSnapshotAttributes',
    description=""" <p>Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot.</p> <p>When you share snapshots with other Amazon Web Services accounts, <code>DescribeDBClusterSnapshotAttributes</code> returns the <code>restore</code> attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If <code>all</code> is included in the list of values for the <code>restore</code> attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.</p> """,
    tags=['maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_d_b_cluster_snapshot_attributes(
    action: Action88 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeDBClusterSnapshots',
    description=""" Returns information about cluster snapshots. This API operation supports pagination. """,
    tags=[
        'snapshot_management',
        'db_cluster_snapshot_management',
        'db_cluster_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_d_b_cluster_snapshots(
    d_b_cluster_identifier: Optional[str] = Query(None, alias='DBClusterIdentifier'),
    d_b_cluster_snapshot_identifier: Optional[str] = Query(
        None, alias='DBClusterSnapshotIdentifier'
    ),
    snapshot_type: Optional[str] = Query(None, alias='SnapshotType'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    include_shared: Optional[bool] = Query(None, alias='IncludeShared'),
    include_public: Optional[bool] = Query(None, alias='IncludePublic'),
    action: Action92 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeDBClusterSnapshots',
    description=""" Returns information about cluster snapshots. This API operation supports pagination. """,
    tags=['event_management', 'event_category_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_d_b_cluster_snapshots(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action92 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeDBClusters',
    description=""" Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the <code>filterName=engine,Values=docdb</code> filter parameter to return only Amazon DocumentDB clusters. """,
    tags=['database_management', 'db_cluster_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_d_b_clusters(
    d_b_cluster_identifier: Optional[str] = Query(None, alias='DBClusterIdentifier'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action96 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeDBClusters',
    description=""" Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the <code>filterName=engine,Values=docdb</code> filter parameter to return only Amazon DocumentDB clusters. """,
    tags=[
        'subscription_management',
        'event_subscription_management',
        'event_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_d_b_clusters(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action96 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeDBEngineVersions',
    description=""" Returns a list of the available engines. """,
    tags=['database_management', 'db_engine_version_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_d_b_engine_versions(
    engine: Optional[str] = Query(None, alias='Engine'),
    engine_version: Optional[str] = Query(None, alias='EngineVersion'),
    d_b_parameter_group_family: Optional[str] = Query(
        None, alias='DBParameterGroupFamily'
    ),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    default_only: Optional[bool] = Query(None, alias='DefaultOnly'),
    list_supported_character_sets: Optional[bool] = Query(
        None, alias='ListSupportedCharacterSets'
    ),
    list_supported_timezones: Optional[bool] = Query(
        None, alias='ListSupportedTimezones'
    ),
    action: Action100 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeDBEngineVersions',
    description=""" Returns a list of the available engines. """,
    tags=['event_subscription_management', 'resource_tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_d_b_engine_versions(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action100 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeDBInstances',
    description=""" Returns information about provisioned Amazon DocumentDB instances. This API supports pagination. """,
    tags=['db_instance_management', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_d_b_instances(
    d_b_instance_identifier: Optional[str] = Query(None, alias='DBInstanceIdentifier'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action104 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeDBInstances',
    description=""" Returns information about provisioned Amazon DocumentDB instances. This API supports pagination. """,
    tags=['resource_tagging', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_d_b_instances(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action104 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeDBSubnetGroups',
    description=""" Returns a list of <code>DBSubnetGroup</code> descriptions. If a <code>DBSubnetGroupName</code> is specified, the list will contain only the descriptions of the specified <code>DBSubnetGroup</code>. """,
    tags=['db_subnet_group_management', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_d_b_subnet_groups(
    d_b_subnet_group_name: Optional[str] = Query(None, alias='DBSubnetGroupName'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action108 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeDBSubnetGroups',
    description=""" Returns a list of <code>DBSubnetGroup</code> descriptions. If a <code>DBSubnetGroupName</code> is specified, the list will contain only the descriptions of the specified <code>DBSubnetGroup</code>. """,
    tags=[
        'subscription_management',
        'event_management',
        'event_subscription_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_d_b_subnet_groups(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action108 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeEngineDefaultClusterParameters',
    description=""" Returns the default engine and system parameter information for the cluster database engine. """,
    tags=['database_management', 'db_cluster_parameter_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_engine_default_cluster_parameters(
    d_b_parameter_group_family: str = Query(..., alias='DBParameterGroupFamily'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action112 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeEngineDefaultClusterParameters',
    description=""" Returns the default engine and system parameter information for the cluster database engine. """,
    tags=['maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_engine_default_cluster_parameters(
    action: Action112 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeEventCategories',
    description=""" Displays a list of categories for all event source types, or, if specified, for a specified source type.  """,
    tags=[
        'subscription_management',
        'event_subscription_management',
        'resource_tag_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_event_categories(
    source_type: Optional[str] = Query(None, alias='SourceType'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    action: Action116 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeEventCategories',
    description=""" Displays a list of categories for all event source types, or, if specified, for a specified source type.  """,
    tags=['maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_event_categories(
    action: Action116 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeEventSubscriptions',
    description=""" <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes <code>SubscriptionName</code>, <code>SNSTopicARN</code>, <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>, <code>CreationTime</code>, and <code>Status</code>.</p> <p>If you specify a <code>SubscriptionName</code>, lists the description for that subscription.</p> """,
    tags=['event_subscription_management', 'subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_event_subscriptions(
    subscription_name: Optional[str] = Query(None, alias='SubscriptionName'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action120 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeEventSubscriptions',
    description=""" <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes <code>SubscriptionName</code>, <code>SNSTopicARN</code>, <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>, <code>CreationTime</code>, and <code>Status</code>.</p> <p>If you specify a <code>SubscriptionName</code>, lists the description for that subscription.</p> """,
    tags=['event_management', 'event_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_event_subscriptions(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action120 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeEvents',
    description=""" Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned. """,
    tags=['event_subscription_management', 'event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_events(
    source_identifier: Optional[str] = Query(None, alias='SourceIdentifier'),
    source_type: Optional[SourceType] = Query(None, alias='SourceType'),
    start_time: Optional[datetime] = Query(None, alias='StartTime'),
    end_time: Optional[datetime] = Query(None, alias='EndTime'),
    duration: Optional[int] = Query(None, alias='Duration'),
    event_categories: Optional[EventCategories] = Query(None, alias='EventCategories'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action124 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeEvents',
    description=""" Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned. """,
    tags=['tag_management', 'resource_tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_events(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action124 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeGlobalClusters',
    description=""" <p>Returns information about Amazon DocumentDB global clusters. This API supports pagination.</p> <note> <p>This action only applies to Amazon DocumentDB clusters.</p> </note> """,
    tags=['global_cluster_management', 'database_management', 'db_cluster_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_global_clusters(
    global_cluster_identifier: Optional[
        constr(pattern=r'[A-Za-z][0-9A-Za-z-:._]*', min_length=1, max_length=255)
    ] = Query(None, alias='GlobalClusterIdentifier'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action128 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeGlobalClusters',
    description=""" <p>Returns information about Amazon DocumentDB global clusters. This API supports pagination.</p> <note> <p>This action only applies to Amazon DocumentDB clusters.</p> </note> """,
    tags=['subscription_management', 'event_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_global_clusters(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action128 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribeOrderableDBInstanceOptions',
    description=""" Returns a list of orderable instance options for the specified engine. """,
    tags=[
        'db_instance_management',
        'db_engine_version_management',
        'database_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_orderable_d_b_instance_options(
    engine: str = Query(..., alias='Engine'),
    engine_version: Optional[str] = Query(None, alias='EngineVersion'),
    d_b_instance_class: Optional[str] = Query(None, alias='DBInstanceClass'),
    license_model: Optional[str] = Query(None, alias='LicenseModel'),
    vpc: Optional[bool] = Query(None, alias='Vpc'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action132 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribeOrderableDBInstanceOptions',
    description=""" Returns a list of orderable instance options for the specified engine. """,
    tags=['tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_orderable_d_b_instance_options(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action132 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=DescribePendingMaintenanceActions',
    description=""" Returns a list of resources (for example, instances) that have at least one pending maintenance action. """,
    tags=['resource_tagging', 'tag_management', 'resource_tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__describe_pending_maintenance_actions(
    resource_identifier: Optional[str] = Query(None, alias='ResourceIdentifier'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    marker: Optional[str] = Query(None, alias='Marker'),
    max_records: Optional[int] = Query(None, alias='MaxRecords'),
    action: Action136 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=DescribePendingMaintenanceActions',
    description=""" Returns a list of resources (for example, instances) that have at least one pending maintenance action. """,
    tags=['resource_tagging', 'tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__describe_pending_maintenance_actions(
    max_records: Optional[str] = Query(None, alias='MaxRecords'),
    marker: Optional[str] = Query(None, alias='Marker'),
    action: Action136 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=FailoverDBCluster',
    description=""" <p>Forces a failover for a cluster.</p> <p>A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).</p> <p>If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.</p> """,
    tags=['database_management', 'db_cluster_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__failover_d_b_cluster(
    d_b_cluster_identifier: Optional[str] = Query(None, alias='DBClusterIdentifier'),
    target_d_b_instance_identifier: Optional[str] = Query(
        None, alias='TargetDBInstanceIdentifier'
    ),
    action: Action140 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=FailoverDBCluster',
    description=""" <p>Forces a failover for a cluster.</p> <p>A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer).</p> <p>If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.</p> """,
    tags=['maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__failover_d_b_cluster(
    action: Action140 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ListTagsForResource',
    description=""" Lists all tags on an Amazon DocumentDB resource. """,
    tags=['resource_tagging', 'tag_management', 'resource_tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__list_tags_for_resource(
    resource_name: str = Query(..., alias='ResourceName'),
    filters: Optional[Filters] = Query(None, alias='Filters'),
    action: Action144 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ListTagsForResource',
    description=""" Lists all tags on an Amazon DocumentDB resource. """,
    tags=['resource_tag_management', 'tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__list_tags_for_resource(
    action: Action144 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyDBCluster',
    description=""" Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.  """,
    tags=['database_management', 'db_cluster_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_d_b_cluster(
    d_b_cluster_identifier: str = Query(..., alias='DBClusterIdentifier'),
    new_d_b_cluster_identifier: Optional[str] = Query(
        None, alias='NewDBClusterIdentifier'
    ),
    apply_immediately: Optional[bool] = Query(None, alias='ApplyImmediately'),
    backup_retention_period: Optional[int] = Query(None, alias='BackupRetentionPeriod'),
    d_b_cluster_parameter_group_name: Optional[str] = Query(
        None, alias='DBClusterParameterGroupName'
    ),
    vpc_security_group_ids: Optional[VpcSecurityGroupIds] = Query(
        None, alias='VpcSecurityGroupIds'
    ),
    port: Optional[int] = Query(None, alias='Port'),
    master_user_password: Optional[str] = Query(None, alias='MasterUserPassword'),
    preferred_backup_window: Optional[str] = Query(None, alias='PreferredBackupWindow'),
    preferred_maintenance_window: Optional[str] = Query(
        None, alias='PreferredMaintenanceWindow'
    ),
    cloudwatch_logs_export_configuration: Optional[
        CloudwatchLogsExportConfiguration
    ] = Query(None, alias='CloudwatchLogsExportConfiguration'),
    engine_version: Optional[str] = Query(None, alias='EngineVersion'),
    deletion_protection: Optional[bool] = Query(None, alias='DeletionProtection'),
    action: Action148 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyDBCluster',
    description=""" Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.  """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_d_b_cluster(
    action: Action148 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyDBClusterParameterGroup',
    description=""" <p> Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.</p> </note> <important> <p>After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter.</p> </important> """,
    tags=[
        'database_management',
        'db_cluster_parameter_management',
        'db_cluster_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_d_b_cluster_parameter_group(
    d_b_cluster_parameter_group_name: str = Query(
        ..., alias='DBClusterParameterGroupName'
    ),
    parameters: Parameters = Query(..., alias='Parameters'),
    action: Action152 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyDBClusterParameterGroup',
    description=""" <p> Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request. </p> <note> <p>Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect.</p> </note> <important> <p>After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the <code>character_set_database</code> parameter.</p> </important> """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_d_b_cluster_parameter_group(
    action: Action152 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyDBClusterSnapshotAttribute',
    description=""" <p>Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot.</p> <p>To share a manual cluster snapshot with other Amazon Web Services accounts, specify <code>restore</code> as the <code>AttributeName</code>, and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value <code>all</code> to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the <code>all</code> value for any manual cluster snapshots that contain private information that you don't want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> """,
    tags=[
        'db_cluster_snapshot_management',
        'snapshot_management',
        'db_cluster_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_d_b_cluster_snapshot_attribute(
    d_b_cluster_snapshot_identifier: str = Query(
        ..., alias='DBClusterSnapshotIdentifier'
    ),
    attribute_name: str = Query(..., alias='AttributeName'),
    values_to_add: Optional[ValuesToAdd] = Query(None, alias='ValuesToAdd'),
    values_to_remove: Optional[ValuesToRemove] = Query(None, alias='ValuesToRemove'),
    action: Action156 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyDBClusterSnapshotAttribute',
    description=""" <p>Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot.</p> <p>To share a manual cluster snapshot with other Amazon Web Services accounts, specify <code>restore</code> as the <code>AttributeName</code>, and use the <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value <code>all</code> to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the <code>all</code> value for any manual cluster snapshots that contain private information that you don't want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the <code>ValuesToAdd</code> parameter. You can't use <code>all</code> as a value for that parameter in this case.</p> """,
    tags=['subscription_management', 'event_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_d_b_cluster_snapshot_attribute(
    action: Action156 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyDBInstance',
    description=""" Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. """,
    tags=[
        'db_instance_management',
        'database_management',
        'maintenance_action_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_d_b_instance(
    d_b_instance_identifier: str = Query(..., alias='DBInstanceIdentifier'),
    d_b_instance_class: Optional[str] = Query(None, alias='DBInstanceClass'),
    apply_immediately: Optional[bool] = Query(None, alias='ApplyImmediately'),
    preferred_maintenance_window: Optional[str] = Query(
        None, alias='PreferredMaintenanceWindow'
    ),
    auto_minor_version_upgrade: Optional[bool] = Query(
        None, alias='AutoMinorVersionUpgrade'
    ),
    new_d_b_instance_identifier: Optional[str] = Query(
        None, alias='NewDBInstanceIdentifier'
    ),
    c_a_certificate_identifier: Optional[str] = Query(
        None, alias='CACertificateIdentifier'
    ),
    copy_tags_to_snapshot: Optional[bool] = Query(None, alias='CopyTagsToSnapshot'),
    promotion_tier: Optional[int] = Query(None, alias='PromotionTier'),
    enable_performance_insights: Optional[bool] = Query(
        None, alias='EnablePerformanceInsights'
    ),
    performance_insights_k_m_s_key_id: Optional[str] = Query(
        None, alias='PerformanceInsightsKMSKeyId'
    ),
    action: Action160 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyDBInstance',
    description=""" Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request. """,
    tags=['event_management', 'event_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_d_b_instance(
    action: Action160 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyDBSubnetGroup',
    description=""" Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region. """,
    tags=['db_subnet_group_management', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_d_b_subnet_group(
    d_b_subnet_group_name: str = Query(..., alias='DBSubnetGroupName'),
    d_b_subnet_group_description: Optional[str] = Query(
        None, alias='DBSubnetGroupDescription'
    ),
    subnet_ids: SubnetIds = Query(..., alias='SubnetIds'),
    action: Action164 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyDBSubnetGroup',
    description=""" Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region. """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_d_b_subnet_group(
    action: Action164 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyEventSubscription',
    description=""" Modifies an existing Amazon DocumentDB event notification subscription. """,
    tags=['event_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_event_subscription(
    subscription_name: str = Query(..., alias='SubscriptionName'),
    sns_topic_arn: Optional[str] = Query(None, alias='SnsTopicArn'),
    source_type: Optional[str] = Query(None, alias='SourceType'),
    event_categories: Optional[EventCategories] = Query(None, alias='EventCategories'),
    enabled: Optional[bool] = Query(None, alias='Enabled'),
    action: Action168 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyEventSubscription',
    description=""" Modifies an existing Amazon DocumentDB event notification subscription. """,
    tags=[
        'subscription_management',
        'event_subscription_management',
        'maintenance_action_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_event_subscription(
    action: Action168 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ModifyGlobalCluster',
    description=""" <p>Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.</p> <note> <p>This action only applies to Amazon DocumentDB clusters.</p> </note> """,
    tags=['global_cluster_management', 'database_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__modify_global_cluster(
    global_cluster_identifier: constr(
        pattern=r'[A-Za-z][0-9A-Za-z-:._]*', min_length=1, max_length=255
    ) = Query(..., alias='GlobalClusterIdentifier'),
    new_global_cluster_identifier: Optional[
        constr(pattern=r'[A-Za-z][0-9A-Za-z-:._]*', min_length=1, max_length=255)
    ] = Query(None, alias='NewGlobalClusterIdentifier'),
    deletion_protection: Optional[bool] = Query(None, alias='DeletionProtection'),
    action: Action172 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ModifyGlobalCluster',
    description=""" <p>Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request.</p> <note> <p>This action only applies to Amazon DocumentDB clusters.</p> </note> """,
    tags=['event_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__modify_global_cluster(
    action: Action172 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=RebootDBInstance',
    description=""" <p>You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to <i>rebooting</i>. </p> """,
    tags=[
        'db_instance_management',
        'db_cluster_management',
        'maintenance_action_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__reboot_d_b_instance(
    d_b_instance_identifier: str = Query(..., alias='DBInstanceIdentifier'),
    force_failover: Optional[bool] = Query(None, alias='ForceFailover'),
    action: Action176 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=RebootDBInstance',
    description=""" <p>You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. </p> <p>Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to <i>rebooting</i>. </p> """,
    tags=['certificate_management', 'maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__reboot_d_b_instance(
    action: Action176 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=RemoveFromGlobalCluster',
    description=""" <p>Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. </p> <note> <p>This action only applies to Amazon DocumentDB clusters.</p> </note> """,
    tags=['database_management', 'global_cluster_management', 'db_cluster_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__remove_from_global_cluster(
    global_cluster_identifier: constr(
        pattern=r'[A-Za-z][0-9A-Za-z-:._]*', min_length=1, max_length=255
    ) = Query(..., alias='GlobalClusterIdentifier'),
    db_cluster_identifier: str = Query(..., alias='DbClusterIdentifier'),
    action: Action180 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=RemoveFromGlobalCluster',
    description=""" <p>Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. </p> <note> <p>This action only applies to Amazon DocumentDB clusters.</p> </note> """,
    tags=['maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__remove_from_global_cluster(
    action: Action180 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=RemoveSourceIdentifierFromSubscription',
    description=""" Removes a source identifier from an existing Amazon DocumentDB event notification subscription. """,
    tags=[
        'subscription_management',
        'event_subscription_management',
        'global_cluster_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__remove_source_identifier_from_subscription(
    subscription_name: str = Query(..., alias='SubscriptionName'),
    source_identifier: str = Query(..., alias='SourceIdentifier'),
    action: Action184 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=RemoveSourceIdentifierFromSubscription',
    description=""" Removes a source identifier from an existing Amazon DocumentDB event notification subscription. """,
    tags=['event_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__remove_source_identifier_from_subscription(
    action: Action184 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=RemoveTagsFromResource',
    description=""" Removes metadata tags from an Amazon DocumentDB resource. """,
    tags=['resource_tagging', 'tag_management', 'resource_tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__remove_tags_from_resource(
    resource_name: str = Query(..., alias='ResourceName'),
    tag_keys: TagKeys = Query(..., alias='TagKeys'),
    action: Action188 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=RemoveTagsFromResource',
    description=""" Removes metadata tags from an Amazon DocumentDB resource. """,
    tags=['maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__remove_tags_from_resource(
    action: Action188 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=ResetDBClusterParameterGroup',
    description=""" <p> Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance reboot.</p> """,
    tags=[
        'db_cluster_parameter_management',
        'database_management',
        'db_cluster_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__reset_d_b_cluster_parameter_group(
    d_b_cluster_parameter_group_name: str = Query(
        ..., alias='DBClusterParameterGroupName'
    ),
    reset_all_parameters: Optional[bool] = Query(None, alias='ResetAllParameters'),
    parameters: Optional[Parameters] = Query(None, alias='Parameters'),
    action: Action192 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=ResetDBClusterParameterGroup',
    description=""" <p> Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire cluster parameter group, specify the <code>DBClusterParameterGroupName</code> and <code>ResetAllParameters</code> parameters. </p> <p> When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to <code>pending-reboot</code> to take effect on the next DB instance reboot.</p> """,
    tags=['event_management', 'maintenance_action_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__reset_d_b_cluster_parameter_group(
    action: Action192 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=RestoreDBClusterFromSnapshot',
    description=""" <p>Creates a new cluster from a snapshot or cluster snapshot.</p> <p>If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.</p> """,
    tags=[
        'database_management',
        'db_cluster_management',
        'db_cluster_snapshot_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__restore_d_b_cluster_from_snapshot(
    availability_zones: Optional[AvailabilityZones] = Query(
        None, alias='AvailabilityZones'
    ),
    d_b_cluster_identifier: str = Query(..., alias='DBClusterIdentifier'),
    snapshot_identifier: str = Query(..., alias='SnapshotIdentifier'),
    engine: str = Query(..., alias='Engine'),
    engine_version: Optional[str] = Query(None, alias='EngineVersion'),
    port: Optional[int] = Query(None, alias='Port'),
    d_b_subnet_group_name: Optional[str] = Query(None, alias='DBSubnetGroupName'),
    vpc_security_group_ids: Optional[VpcSecurityGroupIds] = Query(
        None, alias='VpcSecurityGroupIds'
    ),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    kms_key_id: Optional[str] = Query(None, alias='KmsKeyId'),
    enable_cloudwatch_logs_exports: Optional[EnableCloudwatchLogsExports] = Query(
        None, alias='EnableCloudwatchLogsExports'
    ),
    deletion_protection: Optional[bool] = Query(None, alias='DeletionProtection'),
    d_b_cluster_parameter_group_name: Optional[str] = Query(
        None, alias='DBClusterParameterGroupName'
    ),
    action: Action196 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=RestoreDBClusterFromSnapshot',
    description=""" <p>Creates a new cluster from a snapshot or cluster snapshot.</p> <p>If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group.</p> <p>If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.</p> """,
    tags=['resource_tag_management', 'tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__restore_d_b_cluster_from_snapshot(
    action: Action196 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=RestoreDBClusterToPointInTime',
    description=""" Restores a cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group.  """,
    tags=['db_cluster_management', 'db_cluster_restore_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__restore_d_b_cluster_to_point_in_time(
    d_b_cluster_identifier: str = Query(..., alias='DBClusterIdentifier'),
    restore_type: Optional[str] = Query(None, alias='RestoreType'),
    source_d_b_cluster_identifier: str = Query(..., alias='SourceDBClusterIdentifier'),
    restore_to_time: Optional[datetime] = Query(None, alias='RestoreToTime'),
    use_latest_restorable_time: Optional[bool] = Query(
        None, alias='UseLatestRestorableTime'
    ),
    port: Optional[int] = Query(None, alias='Port'),
    d_b_subnet_group_name: Optional[str] = Query(None, alias='DBSubnetGroupName'),
    vpc_security_group_ids: Optional[VpcSecurityGroupIds] = Query(
        None, alias='VpcSecurityGroupIds'
    ),
    tags: Optional[Tags] = Query(None, alias='Tags'),
    kms_key_id: Optional[str] = Query(None, alias='KmsKeyId'),
    enable_cloudwatch_logs_exports: Optional[EnableCloudwatchLogsExports] = Query(
        None, alias='EnableCloudwatchLogsExports'
    ),
    deletion_protection: Optional[bool] = Query(None, alias='DeletionProtection'),
    action: Action200 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=RestoreDBClusterToPointInTime',
    description=""" Restores a cluster to an arbitrary point in time. Users can restore to any point in time before <code>LatestRestorableTime</code> for up to <code>BackupRetentionPeriod</code> days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group.  """,
    tags=['resource_tagging', 'tag_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__restore_d_b_cluster_to_point_in_time(
    action: Action200 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=StartDBCluster',
    description=""" Restarts the stopped cluster that is specified by <code>DBClusterIdentifier</code>. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html">Stopping and Starting an Amazon DocumentDB Cluster</a>. """,
    tags=['database_management', 'db_cluster_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__start_d_b_cluster(
    d_b_cluster_identifier: str = Query(..., alias='DBClusterIdentifier'),
    action: Action204 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=StartDBCluster',
    description=""" Restarts the stopped cluster that is specified by <code>DBClusterIdentifier</code>. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html">Stopping and Starting an Amazon DocumentDB Cluster</a>. """,
    tags=['event_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__start_d_b_cluster(
    action: Action204 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Action=StopDBCluster',
    description=""" Stops the running cluster that is specified by <code>DBClusterIdentifier</code>. The cluster must be in the <i>available</i> state. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html">Stopping and Starting an Amazon DocumentDB Cluster</a>. """,
    tags=['database_management', 'db_cluster_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__stop_d_b_cluster(
    d_b_cluster_identifier: str = Query(..., alias='DBClusterIdentifier'),
    action: Action208 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Action=StopDBCluster',
    description=""" Stops the running cluster that is specified by <code>DBClusterIdentifier</code>. The cluster must be in the <i>available</i> state. For more information, see <a href="https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html">Stopping and Starting an Amazon DocumentDB Cluster</a>. """,
    tags=['event_subscription_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__stop_d_b_cluster(
    action: Action208 = Query(..., alias='Action'),
    version: Version = Query(..., alias='Version'),
    x__amz__content__sha256: Optional[str] = Header(None, alias='X-Amz-Content-Sha256'),
    x__amz__date: Optional[str] = Header(None, alias='X-Amz-Date'),
    x__amz__algorithm: Optional[str] = Header(None, alias='X-Amz-Algorithm'),
    x__amz__credential: Optional[str] = Header(None, alias='X-Amz-Credential'),
    x__amz__security__token: Optional[str] = Header(None, alias='X-Amz-Security-Token'),
    x__amz__signature: Optional[str] = Header(None, alias='X-Amz-Signature'),
    x__amz__signed_headers: Optional[str] = Header(None, alias='X-Amz-SignedHeaders'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
