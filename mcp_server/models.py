# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:39:01+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class ApplyMethod(Enum):
    immediate = 'immediate'
    pending_reboot = 'pending-reboot'


class AuthorizationNotFoundFault(RootModel[Any]):
    root: Any


class Boolean(RootModel[bool]):
    root: bool


class BooleanOptional(RootModel[bool]):
    root: bool


class CertificateNotFoundFault(RootModel[Any]):
    root: Any


class DBClusterAlreadyExistsFault(RootModel[Any]):
    root: Any


class DBClusterNotFoundFault(RootModel[Any]):
    root: Any


class DBClusterParameterGroupNotFoundFault(RootModel[Any]):
    root: Any


class DBClusterQuotaExceededFault(RootModel[Any]):
    root: Any


class DBClusterSnapshotAlreadyExistsFault(RootModel[Any]):
    root: Any


class DBClusterSnapshotNotFoundFault(RootModel[Any]):
    root: Any


class DBInstanceAlreadyExistsFault(RootModel[Any]):
    root: Any


class DBInstanceNotFoundFault(RootModel[Any]):
    root: Any


class DBParameterGroupAlreadyExistsFault(RootModel[Any]):
    root: Any


class DBParameterGroupNotFoundFault(RootModel[Any]):
    root: Any


class DBParameterGroupQuotaExceededFault(RootModel[Any]):
    root: Any


class DBSecurityGroupNotFoundFault(RootModel[Any]):
    root: Any


class DBSnapshotAlreadyExistsFault(RootModel[Any]):
    root: Any


class DBSnapshotNotFoundFault(RootModel[Any]):
    root: Any


class DBSubnetGroupAlreadyExistsFault(RootModel[Any]):
    root: Any


class DBSubnetGroupDoesNotCoverEnoughAZs(RootModel[Any]):
    root: Any


class DBSubnetGroupNotFoundFault(RootModel[Any]):
    root: Any


class DBSubnetGroupQuotaExceededFault(RootModel[Any]):
    root: Any


class DBSubnetQuotaExceededFault(RootModel[Any]):
    root: Any


class DBUpgradeDependencyFailureFault(RootModel[Any]):
    root: Any


class EventSubscriptionQuotaExceededFault(RootModel[Any]):
    root: Any


class GlobalClusterAlreadyExistsFault(RootModel[Any]):
    root: Any


class GlobalClusterIdentifier(
    RootModel[constr(pattern=r'[A-Za-z][0-9A-Za-z-:._]*', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[A-Za-z][0-9A-Za-z-:._]*', min_length=1, max_length=255)


class GlobalClusterNotFoundFault(RootModel[Any]):
    root: Any


class GlobalClusterQuotaExceededFault(RootModel[Any]):
    root: Any


class InstanceQuotaExceededFault(RootModel[Any]):
    root: Any


class InsufficientDBClusterCapacityFault(RootModel[Any]):
    root: Any


class InsufficientDBInstanceCapacityFault(RootModel[Any]):
    root: Any


class InsufficientStorageClusterCapacityFault(RootModel[Any]):
    root: Any


class Integer(RootModel[int]):
    root: int


class IntegerOptional(RootModel[int]):
    root: int


class InvalidDBClusterSnapshotStateFault(RootModel[Any]):
    root: Any


class InvalidDBClusterStateFault(RootModel[Any]):
    root: Any


class InvalidDBInstanceStateFault(RootModel[Any]):
    root: Any


class InvalidDBParameterGroupStateFault(RootModel[Any]):
    root: Any


class InvalidDBSecurityGroupStateFault(RootModel[Any]):
    root: Any


class InvalidDBSnapshotStateFault(RootModel[Any]):
    root: Any


class InvalidDBSubnetGroupStateFault(RootModel[Any]):
    root: Any


class InvalidDBSubnetStateFault(RootModel[Any]):
    root: Any


class InvalidEventSubscriptionStateFault(RootModel[Any]):
    root: Any


class InvalidGlobalClusterStateFault(RootModel[Any]):
    root: Any


class InvalidRestoreFault(RootModel[Any]):
    root: Any


class InvalidSubnet(RootModel[Any]):
    root: Any


class InvalidVPCNetworkStateFault(RootModel[Any]):
    root: Any


class KMSKeyNotAccessibleFault(RootModel[Any]):
    root: Any


class ModifyGlobalClusterMessage(BaseModel):
    DeletionProtection: Optional[BooleanOptional] = None
    GlobalClusterIdentifier_1: GlobalClusterIdentifier = Field(
        ..., alias='GlobalClusterIdentifier'
    )
    NewGlobalClusterIdentifier: Optional[GlobalClusterIdentifier] = None


class ResourceNotFoundFault(RootModel[Any]):
    root: Any


class SNSInvalidTopicFault(RootModel[Any]):
    root: Any


class SNSNoAuthorizationFault(RootModel[Any]):
    root: Any


class SNSTopicArnNotFoundFault(RootModel[Any]):
    root: Any


class SharedSnapshotQuotaExceededFault(RootModel[Any]):
    root: Any


class SnapshotQuotaExceededFault(RootModel[Any]):
    root: Any


class SourceNotFoundFault(RootModel[Any]):
    root: Any


class SourceType(Enum):
    db_instance = 'db-instance'
    db_parameter_group = 'db-parameter-group'
    db_security_group = 'db-security-group'
    db_snapshot = 'db-snapshot'
    db_cluster = 'db-cluster'
    db_cluster_snapshot = 'db-cluster-snapshot'


class StorageQuotaExceededFault(RootModel[Any]):
    root: Any


class StorageTypeNotSupportedFault(RootModel[Any]):
    root: Any


class String(RootModel[str]):
    root: str


class SubnetAlreadyInUse(RootModel[Any]):
    root: Any


class SubnetIdentifierList(RootModel[List[String]]):
    root: List[String]


class SubscriptionAlreadyExistFault(RootModel[Any]):
    root: Any


class SubscriptionCategoryNotFoundFault(RootModel[Any]):
    root: Any


class SubscriptionNotFoundFault(RootModel[Any]):
    root: Any


class TStamp(RootModel[datetime]):
    root: datetime


class Tag(BaseModel):
    Key: Optional[String] = None
    Value: Optional[String] = None


class TagList(RootModel[List[Tag]]):
    root: List[Tag]


class TagListMessage(BaseModel):
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class UpgradeTarget(BaseModel):
    AutoUpgrade: Optional[Boolean] = None
    Description: Optional[String] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    IsMajorVersionUpgrade: Optional[Boolean] = None


class ValidUpgradeTargetList(RootModel[List[UpgradeTarget]]):
    root: List[UpgradeTarget]


class VpcSecurityGroupIdList(RootModel[List[String]]):
    root: List[String]


class VpcSecurityGroupMembership(BaseModel):
    Status: Optional[String] = None
    VpcSecurityGroupId: Optional[String] = None


class VpcSecurityGroupMembershipList(RootModel[List[VpcSecurityGroupMembership]]):
    root: List[VpcSecurityGroupMembership]


class Action(Enum):
    AddSourceIdentifierToSubscription = 'AddSourceIdentifierToSubscription'


class Version(Enum):
    field_2014_10_31 = '2014-10-31'


class Action4(Enum):
    AddTagsToResource = 'AddTagsToResource'


class Tags(RootModel[List[Tag]]):
    root: List[Tag]


class Action8(Enum):
    ApplyPendingMaintenanceAction = 'ApplyPendingMaintenanceAction'


class Action12(Enum):
    CopyDBClusterParameterGroup = 'CopyDBClusterParameterGroup'


class Action16(Enum):
    CopyDBClusterSnapshot = 'CopyDBClusterSnapshot'


class Action20(Enum):
    CreateDBCluster = 'CreateDBCluster'


class AvailabilityZones(RootModel[List[String]]):
    root: List[String]


class VpcSecurityGroupIds(RootModel[List[String]]):
    root: List[String]


class EnableCloudwatchLogsExports(RootModel[List[String]]):
    root: List[String]


class Action24(Enum):
    CreateDBClusterParameterGroup = 'CreateDBClusterParameterGroup'


class Action28(Enum):
    CreateDBClusterSnapshot = 'CreateDBClusterSnapshot'


class Action32(Enum):
    CreateDBInstance = 'CreateDBInstance'


class Action36(Enum):
    CreateDBSubnetGroup = 'CreateDBSubnetGroup'


class SubnetIds(RootModel[List[String]]):
    root: List[String]


class Action40(Enum):
    CreateEventSubscription = 'CreateEventSubscription'


class EventCategories(RootModel[List[String]]):
    root: List[String]


class SourceIds(RootModel[List[String]]):
    root: List[String]


class Action44(Enum):
    CreateGlobalCluster = 'CreateGlobalCluster'


class Action48(Enum):
    DeleteDBCluster = 'DeleteDBCluster'


class Action52(Enum):
    DeleteDBClusterParameterGroup = 'DeleteDBClusterParameterGroup'


class Action56(Enum):
    DeleteDBClusterSnapshot = 'DeleteDBClusterSnapshot'


class Action60(Enum):
    DeleteDBInstance = 'DeleteDBInstance'


class Action64(Enum):
    DeleteDBSubnetGroup = 'DeleteDBSubnetGroup'


class Action68(Enum):
    DeleteEventSubscription = 'DeleteEventSubscription'


class Action72(Enum):
    DeleteGlobalCluster = 'DeleteGlobalCluster'


class Action76(Enum):
    DescribeCertificates = 'DescribeCertificates'


class Action80(Enum):
    DescribeDBClusterParameterGroups = 'DescribeDBClusterParameterGroups'


class Action84(Enum):
    DescribeDBClusterParameters = 'DescribeDBClusterParameters'


class Action88(Enum):
    DescribeDBClusterSnapshotAttributes = 'DescribeDBClusterSnapshotAttributes'


class Action92(Enum):
    DescribeDBClusterSnapshots = 'DescribeDBClusterSnapshots'


class Action96(Enum):
    DescribeDBClusters = 'DescribeDBClusters'


class Action100(Enum):
    DescribeDBEngineVersions = 'DescribeDBEngineVersions'


class Action104(Enum):
    DescribeDBInstances = 'DescribeDBInstances'


class Action108(Enum):
    DescribeDBSubnetGroups = 'DescribeDBSubnetGroups'


class Action112(Enum):
    DescribeEngineDefaultClusterParameters = 'DescribeEngineDefaultClusterParameters'


class Action116(Enum):
    DescribeEventCategories = 'DescribeEventCategories'


class Action120(Enum):
    DescribeEventSubscriptions = 'DescribeEventSubscriptions'


class Action124(Enum):
    DescribeEvents = 'DescribeEvents'


class Action128(Enum):
    DescribeGlobalClusters = 'DescribeGlobalClusters'


class Action132(Enum):
    DescribeOrderableDBInstanceOptions = 'DescribeOrderableDBInstanceOptions'


class Action136(Enum):
    DescribePendingMaintenanceActions = 'DescribePendingMaintenanceActions'


class Action140(Enum):
    FailoverDBCluster = 'FailoverDBCluster'


class Action144(Enum):
    ListTagsForResource = 'ListTagsForResource'


class Action148(Enum):
    ModifyDBCluster = 'ModifyDBCluster'


class Action152(Enum):
    ModifyDBClusterParameterGroup = 'ModifyDBClusterParameterGroup'


class Action156(Enum):
    ModifyDBClusterSnapshotAttribute = 'ModifyDBClusterSnapshotAttribute'


class ValuesToAdd(RootModel[List[String]]):
    root: List[String]


class ValuesToRemove(RootModel[List[String]]):
    root: List[String]


class Action160(Enum):
    ModifyDBInstance = 'ModifyDBInstance'


class Action164(Enum):
    ModifyDBSubnetGroup = 'ModifyDBSubnetGroup'


class Action168(Enum):
    ModifyEventSubscription = 'ModifyEventSubscription'


class Action172(Enum):
    ModifyGlobalCluster = 'ModifyGlobalCluster'


class Action176(Enum):
    RebootDBInstance = 'RebootDBInstance'


class Action180(Enum):
    RemoveFromGlobalCluster = 'RemoveFromGlobalCluster'


class Action184(Enum):
    RemoveSourceIdentifierFromSubscription = 'RemoveSourceIdentifierFromSubscription'


class Action188(Enum):
    RemoveTagsFromResource = 'RemoveTagsFromResource'


class TagKeys(RootModel[List[String]]):
    root: List[String]


class Action192(Enum):
    ResetDBClusterParameterGroup = 'ResetDBClusterParameterGroup'


class Action196(Enum):
    RestoreDBClusterFromSnapshot = 'RestoreDBClusterFromSnapshot'


class Action200(Enum):
    RestoreDBClusterToPointInTime = 'RestoreDBClusterToPointInTime'


class Action204(Enum):
    StartDBCluster = 'StartDBCluster'


class Action208(Enum):
    StopDBCluster = 'StopDBCluster'


class AddSourceIdentifierToSubscriptionMessage(BaseModel):
    SourceIdentifier: String
    SubscriptionName: String


class AddTagsToResourceMessage(BaseModel):
    ResourceName: String
    Tags: TagList


class ApplyPendingMaintenanceActionMessage(BaseModel):
    ApplyAction: String
    OptInType: String
    ResourceIdentifier: String


class AttributeValueList(RootModel[List[String]]):
    root: List[String]


class AvailabilityZone(BaseModel):
    Name: Optional[String] = None


class AvailabilityZoneList(RootModel[List[AvailabilityZone]]):
    root: List[AvailabilityZone]


class Certificate(BaseModel):
    CertificateArn: Optional[String] = None
    CertificateIdentifier: Optional[String] = None
    CertificateType: Optional[String] = None
    Thumbprint: Optional[String] = None
    ValidFrom: Optional[TStamp] = None
    ValidTill: Optional[TStamp] = None


class CertificateList(RootModel[List[Certificate]]):
    root: List[Certificate]


class CertificateMessage(BaseModel):
    Certificates: Optional[CertificateList] = None
    Marker: Optional[String] = None


class CopyDBClusterParameterGroupMessage(BaseModel):
    SourceDBClusterParameterGroupIdentifier: String
    Tags: Optional[TagList] = None
    TargetDBClusterParameterGroupDescription: String
    TargetDBClusterParameterGroupIdentifier: String


class CopyDBClusterSnapshotMessage(BaseModel):
    CopyTags: Optional[BooleanOptional] = None
    KmsKeyId: Optional[String] = None
    PreSignedUrl: Optional[String] = None
    SourceDBClusterSnapshotIdentifier: String
    Tags: Optional[TagList] = None
    TargetDBClusterSnapshotIdentifier: String


class CreateDBClusterParameterGroupMessage(BaseModel):
    DBClusterParameterGroupName: String
    DBParameterGroupFamily: String
    Description: String
    Tags: Optional[TagList] = None


class CreateDBClusterSnapshotMessage(BaseModel):
    DBClusterIdentifier: String
    DBClusterSnapshotIdentifier: String
    Tags: Optional[TagList] = None


class CreateDBInstanceMessage(BaseModel):
    AutoMinorVersionUpgrade: Optional[BooleanOptional] = None
    AvailabilityZone: Optional[String] = None
    CopyTagsToSnapshot: Optional[BooleanOptional] = None
    DBClusterIdentifier: String
    DBInstanceClass: String
    DBInstanceIdentifier: String
    EnablePerformanceInsights: Optional[BooleanOptional] = None
    Engine: String
    PerformanceInsightsKMSKeyId: Optional[String] = None
    PreferredMaintenanceWindow: Optional[String] = None
    PromotionTier: Optional[IntegerOptional] = None
    Tags: Optional[TagList] = None


class CreateDBSubnetGroupMessage(BaseModel):
    DBSubnetGroupDescription: String
    DBSubnetGroupName: String
    SubnetIds: SubnetIdentifierList
    Tags: Optional[TagList] = None


class CreateGlobalClusterMessage(BaseModel):
    DatabaseName: Optional[String] = None
    DeletionProtection: Optional[BooleanOptional] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    GlobalClusterIdentifier_1: GlobalClusterIdentifier = Field(
        ..., alias='GlobalClusterIdentifier'
    )
    SourceDBClusterIdentifier: Optional[String] = None
    StorageEncrypted: Optional[BooleanOptional] = None


class DBClusterMember(BaseModel):
    DBClusterParameterGroupStatus: Optional[String] = None
    DBInstanceIdentifier: Optional[String] = None
    IsClusterWriter: Optional[Boolean] = None
    PromotionTier: Optional[IntegerOptional] = None


class DBClusterMemberList(RootModel[List[DBClusterMember]]):
    root: List[DBClusterMember]


class DBClusterParameterGroup(BaseModel):
    DBClusterParameterGroupArn: Optional[String] = None
    DBClusterParameterGroupName: Optional[String] = None
    DBParameterGroupFamily: Optional[String] = None
    Description: Optional[String] = None


class DBClusterParameterGroupList(RootModel[List[DBClusterParameterGroup]]):
    root: List[DBClusterParameterGroup]


class DBClusterParameterGroupNameMessage(BaseModel):
    DBClusterParameterGroupName: Optional[String] = None


class DBClusterParameterGroupsMessage(BaseModel):
    DBClusterParameterGroups: Optional[DBClusterParameterGroupList] = None
    Marker: Optional[String] = None


class DBClusterRole(BaseModel):
    RoleArn: Optional[String] = None
    Status: Optional[String] = None


class DBClusterRoles(RootModel[List[DBClusterRole]]):
    root: List[DBClusterRole]


class DBClusterSnapshot(BaseModel):
    AvailabilityZones_1: Optional[AvailabilityZones] = Field(
        None, alias='AvailabilityZones'
    )
    ClusterCreateTime: Optional[TStamp] = None
    DBClusterIdentifier: Optional[String] = None
    DBClusterSnapshotArn: Optional[String] = None
    DBClusterSnapshotIdentifier: Optional[String] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    KmsKeyId: Optional[String] = None
    MasterUsername: Optional[String] = None
    PercentProgress: Optional[Integer] = None
    Port: Optional[Integer] = None
    SnapshotCreateTime: Optional[TStamp] = None
    SnapshotType: Optional[String] = None
    SourceDBClusterSnapshotArn: Optional[String] = None
    Status: Optional[String] = None
    StorageEncrypted: Optional[Boolean] = None
    VpcId: Optional[String] = None


class DBClusterSnapshotAttribute(BaseModel):
    AttributeName: Optional[String] = None
    AttributeValues: Optional[AttributeValueList] = None


class DBClusterSnapshotAttributeList(RootModel[List[DBClusterSnapshotAttribute]]):
    root: List[DBClusterSnapshotAttribute]


class DBClusterSnapshotAttributesResult(BaseModel):
    DBClusterSnapshotAttributes: Optional[DBClusterSnapshotAttributeList] = None
    DBClusterSnapshotIdentifier: Optional[String] = None


class DBClusterSnapshotList(RootModel[List[DBClusterSnapshot]]):
    root: List[DBClusterSnapshot]


class DBClusterSnapshotMessage(BaseModel):
    DBClusterSnapshots: Optional[DBClusterSnapshotList] = None
    Marker: Optional[String] = None


class DBInstanceStatusInfo(BaseModel):
    Message: Optional[String] = None
    Normal: Optional[Boolean] = None
    Status: Optional[String] = None
    StatusType: Optional[String] = None


class DBInstanceStatusInfoList(RootModel[List[DBInstanceStatusInfo]]):
    root: List[DBInstanceStatusInfo]


class DeleteDBClusterMessage(BaseModel):
    DBClusterIdentifier: String
    FinalDBSnapshotIdentifier: Optional[String] = None
    SkipFinalSnapshot: Optional[Boolean] = None


class DeleteDBClusterParameterGroupMessage(BaseModel):
    DBClusterParameterGroupName: String


class DeleteDBClusterSnapshotMessage(BaseModel):
    DBClusterSnapshotIdentifier: String


class DeleteDBClusterSnapshotResult(BaseModel):
    DBClusterSnapshot_1: Optional[DBClusterSnapshot] = Field(
        None, alias='DBClusterSnapshot'
    )


class DeleteDBInstanceMessage(BaseModel):
    DBInstanceIdentifier: String


class DeleteDBSubnetGroupMessage(BaseModel):
    DBSubnetGroupName: String


class DeleteEventSubscriptionMessage(BaseModel):
    SubscriptionName: String


class DeleteGlobalClusterMessage(BaseModel):
    GlobalClusterIdentifier_1: GlobalClusterIdentifier = Field(
        ..., alias='GlobalClusterIdentifier'
    )


class DescribeDBClusterSnapshotAttributesMessage(BaseModel):
    DBClusterSnapshotIdentifier: String


class DescribeDBClusterSnapshotAttributesResult(BaseModel):
    DBClusterSnapshotAttributesResult_1: Optional[DBClusterSnapshotAttributesResult] = (
        Field(None, alias='DBClusterSnapshotAttributesResult')
    )


class Endpoint(BaseModel):
    Address: Optional[String] = None
    HostedZoneId: Optional[String] = None
    Port: Optional[Integer] = None


class EventCategoriesList(RootModel[List[String]]):
    root: List[String]


class EventCategoriesMap(BaseModel):
    EventCategories: Optional[EventCategoriesList] = None
    SourceType: Optional[String] = None


class EventCategoriesMapList(RootModel[List[EventCategoriesMap]]):
    root: List[EventCategoriesMap]


class EventCategoriesMessage(BaseModel):
    EventCategoriesMapList_1: Optional[EventCategoriesMapList] = Field(
        None, alias='EventCategoriesMapList'
    )


class FailoverDBClusterMessage(BaseModel):
    DBClusterIdentifier: Optional[String] = None
    TargetDBInstanceIdentifier: Optional[String] = None


class FilterValueList(RootModel[List[String]]):
    root: List[String]


class KeyList(RootModel[List[String]]):
    root: List[String]


class LogTypeList(RootModel[List[String]]):
    root: List[String]


class ModifyDBClusterSnapshotAttributeMessage(BaseModel):
    AttributeName: String
    DBClusterSnapshotIdentifier: String
    ValuesToAdd: Optional[AttributeValueList] = None
    ValuesToRemove: Optional[AttributeValueList] = None


class ModifyDBClusterSnapshotAttributeResult(BaseModel):
    DBClusterSnapshotAttributesResult_1: Optional[DBClusterSnapshotAttributesResult] = (
        Field(None, alias='DBClusterSnapshotAttributesResult')
    )


class ModifyDBInstanceMessage(BaseModel):
    ApplyImmediately: Optional[Boolean] = None
    AutoMinorVersionUpgrade: Optional[BooleanOptional] = None
    CACertificateIdentifier: Optional[String] = None
    CopyTagsToSnapshot: Optional[BooleanOptional] = None
    DBInstanceClass: Optional[String] = None
    DBInstanceIdentifier: String
    EnablePerformanceInsights: Optional[BooleanOptional] = None
    NewDBInstanceIdentifier: Optional[String] = None
    PerformanceInsightsKMSKeyId: Optional[String] = None
    PreferredMaintenanceWindow: Optional[String] = None
    PromotionTier: Optional[IntegerOptional] = None


class ModifyDBSubnetGroupMessage(BaseModel):
    DBSubnetGroupDescription: Optional[String] = None
    DBSubnetGroupName: String
    SubnetIds: SubnetIdentifierList


class ModifyEventSubscriptionMessage(BaseModel):
    Enabled: Optional[BooleanOptional] = None
    EventCategories: Optional[EventCategoriesList] = None
    SnsTopicArn: Optional[String] = None
    SourceType: Optional[String] = None
    SubscriptionName: String


class OrderableDBInstanceOption(BaseModel):
    AvailabilityZones: Optional[AvailabilityZoneList] = None
    DBInstanceClass: Optional[String] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    LicenseModel: Optional[String] = None
    Vpc: Optional[Boolean] = None


class OrderableDBInstanceOptionsList(RootModel[List[OrderableDBInstanceOption]]):
    root: List[OrderableDBInstanceOption]


class OrderableDBInstanceOptionsMessage(BaseModel):
    Marker: Optional[String] = None
    OrderableDBInstanceOptions: Optional[OrderableDBInstanceOptionsList] = None


class Parameter(BaseModel):
    AllowedValues: Optional[String] = None
    ApplyMethod_1: Optional[ApplyMethod] = Field(None, alias='ApplyMethod')
    ApplyType: Optional[String] = None
    DataType: Optional[String] = None
    Description: Optional[String] = None
    IsModifiable: Optional[Boolean] = None
    MinimumEngineVersion: Optional[String] = None
    ParameterName: Optional[String] = None
    ParameterValue: Optional[String] = None
    Source: Optional[String] = None


class ParametersList(RootModel[List[Parameter]]):
    root: List[Parameter]


class PendingCloudwatchLogsExports(BaseModel):
    LogTypesToDisable: Optional[LogTypeList] = None
    LogTypesToEnable: Optional[LogTypeList] = None


class PendingMaintenanceAction(BaseModel):
    Action: Optional[String] = None
    AutoAppliedAfterDate: Optional[TStamp] = None
    CurrentApplyDate: Optional[TStamp] = None
    Description: Optional[String] = None
    ForcedApplyDate: Optional[TStamp] = None
    OptInStatus: Optional[String] = None


class PendingMaintenanceActionDetails(RootModel[List[PendingMaintenanceAction]]):
    root: List[PendingMaintenanceAction]


class PendingModifiedValues(BaseModel):
    AllocatedStorage: Optional[IntegerOptional] = None
    BackupRetentionPeriod: Optional[IntegerOptional] = None
    CACertificateIdentifier: Optional[String] = None
    DBInstanceClass: Optional[String] = None
    DBInstanceIdentifier: Optional[String] = None
    DBSubnetGroupName: Optional[String] = None
    EngineVersion: Optional[String] = None
    Iops: Optional[IntegerOptional] = None
    LicenseModel: Optional[String] = None
    MasterUserPassword: Optional[String] = None
    MultiAZ: Optional[BooleanOptional] = None
    PendingCloudwatchLogsExports_1: Optional[PendingCloudwatchLogsExports] = Field(
        None, alias='PendingCloudwatchLogsExports'
    )
    Port: Optional[IntegerOptional] = None
    StorageType: Optional[String] = None


class ReadReplicaIdentifierList(RootModel[List[String]]):
    root: List[String]


class ReadersArnList(RootModel[List[String]]):
    root: List[String]


class RebootDBInstanceMessage(BaseModel):
    DBInstanceIdentifier: String
    ForceFailover: Optional[BooleanOptional] = None


class RemoveFromGlobalClusterMessage(BaseModel):
    DbClusterIdentifier: String
    GlobalClusterIdentifier_1: GlobalClusterIdentifier = Field(
        ..., alias='GlobalClusterIdentifier'
    )


class RemoveSourceIdentifierFromSubscriptionMessage(BaseModel):
    SourceIdentifier: String
    SubscriptionName: String


class RemoveTagsFromResourceMessage(BaseModel):
    ResourceName: String
    TagKeys: KeyList


class ResetDBClusterParameterGroupMessage(BaseModel):
    DBClusterParameterGroupName: String
    Parameters: Optional[ParametersList] = None
    ResetAllParameters: Optional[Boolean] = None


class ResourcePendingMaintenanceActions(BaseModel):
    PendingMaintenanceActionDetails_1: Optional[PendingMaintenanceActionDetails] = (
        Field(None, alias='PendingMaintenanceActionDetails')
    )
    ResourceIdentifier: Optional[String] = None


class RestoreDBClusterFromSnapshotMessage(BaseModel):
    AvailabilityZones_1: Optional[AvailabilityZones] = Field(
        None, alias='AvailabilityZones'
    )
    DBClusterIdentifier: String
    DBClusterParameterGroupName: Optional[String] = None
    DBSubnetGroupName: Optional[String] = None
    DeletionProtection: Optional[BooleanOptional] = None
    EnableCloudwatchLogsExports: Optional[LogTypeList] = None
    Engine: String
    EngineVersion: Optional[String] = None
    KmsKeyId: Optional[String] = None
    Port: Optional[IntegerOptional] = None
    SnapshotIdentifier: String
    Tags: Optional[TagList] = None
    VpcSecurityGroupIds: Optional[VpcSecurityGroupIdList] = None


class RestoreDBClusterToPointInTimeMessage(BaseModel):
    DBClusterIdentifier: String
    DBSubnetGroupName: Optional[String] = None
    DeletionProtection: Optional[BooleanOptional] = None
    EnableCloudwatchLogsExports: Optional[LogTypeList] = None
    KmsKeyId: Optional[String] = None
    Port: Optional[IntegerOptional] = None
    RestoreToTime: Optional[TStamp] = None
    RestoreType: Optional[String] = None
    SourceDBClusterIdentifier: String
    Tags: Optional[TagList] = None
    UseLatestRestorableTime: Optional[Boolean] = None
    VpcSecurityGroupIds: Optional[VpcSecurityGroupIdList] = None


class SourceIdsList(RootModel[List[String]]):
    root: List[String]


class StartDBClusterMessage(BaseModel):
    DBClusterIdentifier: String


class StopDBClusterMessage(BaseModel):
    DBClusterIdentifier: String


class Subnet(BaseModel):
    SubnetAvailabilityZone: Optional[AvailabilityZone] = None
    SubnetIdentifier: Optional[String] = None
    SubnetStatus: Optional[String] = None


class SubnetList(RootModel[List[Subnet]]):
    root: List[Subnet]


class CloudwatchLogsExportConfiguration(BaseModel):
    DisableLogTypes: Optional[LogTypeList] = None
    EnableLogTypes: Optional[LogTypeList] = None


class Parameters(RootModel[List[Parameter]]):
    root: List[Parameter]


class ApplyPendingMaintenanceActionResult(BaseModel):
    ResourcePendingMaintenanceActions_1: Optional[ResourcePendingMaintenanceActions] = (
        Field(None, alias='ResourcePendingMaintenanceActions')
    )


class CopyDBClusterParameterGroupResult(BaseModel):
    DBClusterParameterGroup_1: Optional[DBClusterParameterGroup] = Field(
        None, alias='DBClusterParameterGroup'
    )


class CopyDBClusterSnapshotResult(BaseModel):
    DBClusterSnapshot_1: Optional[DBClusterSnapshot] = Field(
        None, alias='DBClusterSnapshot'
    )


class CreateDBClusterMessage(BaseModel):
    AvailabilityZones_1: Optional[AvailabilityZones] = Field(
        None, alias='AvailabilityZones'
    )
    BackupRetentionPeriod: Optional[IntegerOptional] = None
    DBClusterIdentifier: String
    DBClusterParameterGroupName: Optional[String] = None
    DBSubnetGroupName: Optional[String] = None
    DeletionProtection: Optional[BooleanOptional] = None
    EnableCloudwatchLogsExports: Optional[LogTypeList] = None
    Engine: String
    EngineVersion: Optional[String] = None
    GlobalClusterIdentifier_1: Optional[GlobalClusterIdentifier] = Field(
        None, alias='GlobalClusterIdentifier'
    )
    KmsKeyId: Optional[String] = None
    MasterUserPassword: Optional[String] = None
    MasterUsername: Optional[String] = None
    Port: Optional[IntegerOptional] = None
    PreSignedUrl: Optional[String] = None
    PreferredBackupWindow: Optional[String] = None
    PreferredMaintenanceWindow: Optional[String] = None
    StorageEncrypted: Optional[BooleanOptional] = None
    Tags: Optional[TagList] = None
    VpcSecurityGroupIds: Optional[VpcSecurityGroupIdList] = None


class CreateDBClusterParameterGroupResult(BaseModel):
    DBClusterParameterGroup_1: Optional[DBClusterParameterGroup] = Field(
        None, alias='DBClusterParameterGroup'
    )


class CreateDBClusterSnapshotResult(BaseModel):
    DBClusterSnapshot_1: Optional[DBClusterSnapshot] = Field(
        None, alias='DBClusterSnapshot'
    )


class CreateEventSubscriptionMessage(BaseModel):
    Enabled: Optional[BooleanOptional] = None
    EventCategories: Optional[EventCategoriesList] = None
    SnsTopicArn: String
    SourceIds: Optional[SourceIdsList] = None
    SourceType: Optional[String] = None
    SubscriptionName: String
    Tags: Optional[TagList] = None


class DBCluster(BaseModel):
    AssociatedRoles: Optional[DBClusterRoles] = None
    AvailabilityZones_1: Optional[AvailabilityZones] = Field(
        None, alias='AvailabilityZones'
    )
    BackupRetentionPeriod: Optional[IntegerOptional] = None
    CloneGroupId: Optional[String] = None
    ClusterCreateTime: Optional[TStamp] = None
    DBClusterArn: Optional[String] = None
    DBClusterIdentifier: Optional[String] = None
    DBClusterMembers: Optional[DBClusterMemberList] = None
    DBClusterParameterGroup: Optional[String] = None
    DBSubnetGroup: Optional[String] = None
    DbClusterResourceId: Optional[String] = None
    DeletionProtection: Optional[Boolean] = None
    EarliestRestorableTime: Optional[TStamp] = None
    EnabledCloudwatchLogsExports: Optional[LogTypeList] = None
    Endpoint: Optional[String] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    HostedZoneId: Optional[String] = None
    KmsKeyId: Optional[String] = None
    LatestRestorableTime: Optional[TStamp] = None
    MasterUsername: Optional[String] = None
    MultiAZ: Optional[Boolean] = None
    PercentProgress: Optional[String] = None
    Port: Optional[IntegerOptional] = None
    PreferredBackupWindow: Optional[String] = None
    PreferredMaintenanceWindow: Optional[String] = None
    ReadReplicaIdentifiers: Optional[ReadReplicaIdentifierList] = None
    ReaderEndpoint: Optional[String] = None
    ReplicationSourceIdentifier: Optional[String] = None
    Status: Optional[String] = None
    StorageEncrypted: Optional[Boolean] = None
    VpcSecurityGroups: Optional[VpcSecurityGroupMembershipList] = None


class DBClusterList(RootModel[List[DBCluster]]):
    root: List[DBCluster]


class DBClusterMessage(BaseModel):
    DBClusters: Optional[DBClusterList] = None
    Marker: Optional[String] = None


class DBClusterParameterGroupDetails(BaseModel):
    Marker: Optional[String] = None
    Parameters: Optional[ParametersList] = None


class DBEngineVersion(BaseModel):
    DBEngineDescription: Optional[String] = None
    DBEngineVersionDescription: Optional[String] = None
    DBParameterGroupFamily: Optional[String] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    ExportableLogTypes: Optional[LogTypeList] = None
    SupportsLogExportsToCloudwatchLogs: Optional[Boolean] = None
    ValidUpgradeTarget: Optional[ValidUpgradeTargetList] = None


class DBEngineVersionList(RootModel[List[DBEngineVersion]]):
    root: List[DBEngineVersion]


class DBEngineVersionMessage(BaseModel):
    DBEngineVersions: Optional[DBEngineVersionList] = None
    Marker: Optional[String] = None


class DBSubnetGroup(BaseModel):
    DBSubnetGroupArn: Optional[String] = None
    DBSubnetGroupDescription: Optional[String] = None
    DBSubnetGroupName: Optional[String] = None
    SubnetGroupStatus: Optional[String] = None
    Subnets: Optional[SubnetList] = None
    VpcId: Optional[String] = None


class DBSubnetGroups(RootModel[List[DBSubnetGroup]]):
    root: List[DBSubnetGroup]


class DeleteDBClusterResult(BaseModel):
    DBCluster_1: Optional[DBCluster] = Field(None, alias='DBCluster')


class EngineDefaults(BaseModel):
    DBParameterGroupFamily: Optional[String] = None
    Marker: Optional[String] = None
    Parameters: Optional[ParametersList] = None


class Event(BaseModel):
    Date: Optional[TStamp] = None
    EventCategories: Optional[EventCategoriesList] = None
    Message: Optional[String] = None
    SourceArn: Optional[String] = None
    SourceIdentifier: Optional[String] = None
    SourceType_1: Optional[SourceType] = Field(None, alias='SourceType')


class EventList(RootModel[List[Event]]):
    root: List[Event]


class EventSubscription(BaseModel):
    CustSubscriptionId: Optional[String] = None
    CustomerAwsId: Optional[String] = None
    Enabled: Optional[Boolean] = None
    EventCategoriesList_1: Optional[EventCategoriesList] = Field(
        None, alias='EventCategoriesList'
    )
    EventSubscriptionArn: Optional[String] = None
    SnsTopicArn: Optional[String] = None
    SourceIdsList_1: Optional[SourceIdsList] = Field(None, alias='SourceIdsList')
    SourceType: Optional[String] = None
    Status: Optional[String] = None
    SubscriptionCreationTime: Optional[String] = None


class EventSubscriptionsList(RootModel[List[EventSubscription]]):
    root: List[EventSubscription]


class EventSubscriptionsMessage(BaseModel):
    EventSubscriptionsList_1: Optional[EventSubscriptionsList] = Field(
        None, alias='EventSubscriptionsList'
    )
    Marker: Optional[String] = None


class EventsMessage(BaseModel):
    Events: Optional[EventList] = None
    Marker: Optional[String] = None


class FailoverDBClusterResult(BaseModel):
    DBCluster_1: Optional[DBCluster] = Field(None, alias='DBCluster')


class Filter(BaseModel):
    Name: String
    Values: FilterValueList


class FilterList(RootModel[List[Filter]]):
    root: List[Filter]


class GlobalClusterMember(BaseModel):
    DBClusterArn: Optional[String] = None
    IsWriter: Optional[Boolean] = None
    Readers: Optional[ReadersArnList] = None


class GlobalClusterMemberList(RootModel[List[GlobalClusterMember]]):
    root: List[GlobalClusterMember]


class ListTagsForResourceMessage(BaseModel):
    Filters: Optional[FilterList] = None
    ResourceName: String


class ModifyDBClusterMessage(BaseModel):
    ApplyImmediately: Optional[Boolean] = None
    BackupRetentionPeriod: Optional[IntegerOptional] = None
    CloudwatchLogsExportConfiguration_1: Optional[CloudwatchLogsExportConfiguration] = (
        Field(None, alias='CloudwatchLogsExportConfiguration')
    )
    DBClusterIdentifier: String
    DBClusterParameterGroupName: Optional[String] = None
    DeletionProtection: Optional[BooleanOptional] = None
    EngineVersion: Optional[String] = None
    MasterUserPassword: Optional[String] = None
    NewDBClusterIdentifier: Optional[String] = None
    Port: Optional[IntegerOptional] = None
    PreferredBackupWindow: Optional[String] = None
    PreferredMaintenanceWindow: Optional[String] = None
    VpcSecurityGroupIds: Optional[VpcSecurityGroupIdList] = None


class ModifyDBClusterParameterGroupMessage(BaseModel):
    DBClusterParameterGroupName: String
    Parameters: ParametersList


class ModifyDBClusterResult(BaseModel):
    DBCluster_1: Optional[DBCluster] = Field(None, alias='DBCluster')


class ModifyDBSubnetGroupResult(BaseModel):
    DBSubnetGroup_1: Optional[DBSubnetGroup] = Field(None, alias='DBSubnetGroup')


class ModifyEventSubscriptionResult(BaseModel):
    EventSubscription_1: Optional[EventSubscription] = Field(
        None, alias='EventSubscription'
    )


class PendingMaintenanceActions(RootModel[List[ResourcePendingMaintenanceActions]]):
    root: List[ResourcePendingMaintenanceActions]


class PendingMaintenanceActionsMessage(BaseModel):
    Marker: Optional[String] = None
    PendingMaintenanceActions_1: Optional[PendingMaintenanceActions] = Field(
        None, alias='PendingMaintenanceActions'
    )


class RemoveSourceIdentifierFromSubscriptionResult(BaseModel):
    EventSubscription_1: Optional[EventSubscription] = Field(
        None, alias='EventSubscription'
    )


class RestoreDBClusterFromSnapshotResult(BaseModel):
    DBCluster_1: Optional[DBCluster] = Field(None, alias='DBCluster')


class RestoreDBClusterToPointInTimeResult(BaseModel):
    DBCluster_1: Optional[DBCluster] = Field(None, alias='DBCluster')


class StartDBClusterResult(BaseModel):
    DBCluster_1: Optional[DBCluster] = Field(None, alias='DBCluster')


class StopDBClusterResult(BaseModel):
    DBCluster_1: Optional[DBCluster] = Field(None, alias='DBCluster')


class Filters(RootModel[List[Filter]]):
    root: List[Filter]


class AddSourceIdentifierToSubscriptionResult(BaseModel):
    EventSubscription_1: Optional[EventSubscription] = Field(
        None, alias='EventSubscription'
    )


class CreateDBClusterResult(BaseModel):
    DBCluster_1: Optional[DBCluster] = Field(None, alias='DBCluster')


class CreateDBSubnetGroupResult(BaseModel):
    DBSubnetGroup_1: Optional[DBSubnetGroup] = Field(None, alias='DBSubnetGroup')


class CreateEventSubscriptionResult(BaseModel):
    EventSubscription_1: Optional[EventSubscription] = Field(
        None, alias='EventSubscription'
    )


class DBInstance(BaseModel):
    AutoMinorVersionUpgrade: Optional[Boolean] = None
    AvailabilityZone: Optional[String] = None
    BackupRetentionPeriod: Optional[Integer] = None
    CACertificateIdentifier: Optional[String] = None
    CopyTagsToSnapshot: Optional[BooleanOptional] = None
    DBClusterIdentifier: Optional[String] = None
    DBInstanceArn: Optional[String] = None
    DBInstanceClass: Optional[String] = None
    DBInstanceIdentifier: Optional[String] = None
    DBInstanceStatus: Optional[String] = None
    DBSubnetGroup_1: Optional[DBSubnetGroup] = Field(None, alias='DBSubnetGroup')
    DbiResourceId: Optional[String] = None
    EnabledCloudwatchLogsExports: Optional[LogTypeList] = None
    Endpoint_1: Optional[Endpoint] = Field(None, alias='Endpoint')
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    InstanceCreateTime: Optional[TStamp] = None
    KmsKeyId: Optional[String] = None
    LatestRestorableTime: Optional[TStamp] = None
    PendingModifiedValues_1: Optional[PendingModifiedValues] = Field(
        None, alias='PendingModifiedValues'
    )
    PreferredBackupWindow: Optional[String] = None
    PreferredMaintenanceWindow: Optional[String] = None
    PromotionTier: Optional[IntegerOptional] = None
    PubliclyAccessible: Optional[Boolean] = None
    StatusInfos: Optional[DBInstanceStatusInfoList] = None
    StorageEncrypted: Optional[Boolean] = None
    VpcSecurityGroups: Optional[VpcSecurityGroupMembershipList] = None


class DBInstanceList(RootModel[List[DBInstance]]):
    root: List[DBInstance]


class DBInstanceMessage(BaseModel):
    DBInstances: Optional[DBInstanceList] = None
    Marker: Optional[String] = None


class DBSubnetGroupMessage(BaseModel):
    DBSubnetGroups_1: Optional[DBSubnetGroups] = Field(None, alias='DBSubnetGroups')
    Marker: Optional[String] = None


class DeleteDBInstanceResult(BaseModel):
    DBInstance_1: Optional[DBInstance] = Field(None, alias='DBInstance')


class DeleteEventSubscriptionResult(BaseModel):
    EventSubscription_1: Optional[EventSubscription] = Field(
        None, alias='EventSubscription'
    )


class DescribeCertificatesMessage(BaseModel):
    CertificateIdentifier: Optional[String] = None
    Filters: Optional[FilterList] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeDBClusterParameterGroupsMessage(BaseModel):
    DBClusterParameterGroupName: Optional[String] = None
    Filters: Optional[FilterList] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeDBClusterParametersMessage(BaseModel):
    DBClusterParameterGroupName: String
    Filters: Optional[FilterList] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    Source: Optional[String] = None


class DescribeDBClusterSnapshotsMessage(BaseModel):
    DBClusterIdentifier: Optional[String] = None
    DBClusterSnapshotIdentifier: Optional[String] = None
    Filters: Optional[FilterList] = None
    IncludePublic: Optional[Boolean] = None
    IncludeShared: Optional[Boolean] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    SnapshotType: Optional[String] = None


class DescribeDBClustersMessage(BaseModel):
    DBClusterIdentifier: Optional[String] = None
    Filters: Optional[FilterList] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeDBEngineVersionsMessage(BaseModel):
    DBParameterGroupFamily: Optional[String] = None
    DefaultOnly: Optional[Boolean] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    Filters: Optional[FilterList] = None
    ListSupportedCharacterSets: Optional[BooleanOptional] = None
    ListSupportedTimezones: Optional[BooleanOptional] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeDBInstancesMessage(BaseModel):
    DBInstanceIdentifier: Optional[String] = None
    Filters: Optional[FilterList] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeDBSubnetGroupsMessage(BaseModel):
    DBSubnetGroupName: Optional[String] = None
    Filters: Optional[FilterList] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeEngineDefaultClusterParametersMessage(BaseModel):
    DBParameterGroupFamily: String
    Filters: Optional[FilterList] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeEngineDefaultClusterParametersResult(BaseModel):
    EngineDefaults_1: Optional[EngineDefaults] = Field(None, alias='EngineDefaults')


class DescribeEventCategoriesMessage(BaseModel):
    Filters: Optional[FilterList] = None
    SourceType: Optional[String] = None


class DescribeEventSubscriptionsMessage(BaseModel):
    Filters: Optional[FilterList] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    SubscriptionName: Optional[String] = None


class DescribeEventsMessage(BaseModel):
    Duration: Optional[IntegerOptional] = None
    EndTime: Optional[TStamp] = None
    EventCategories: Optional[EventCategoriesList] = None
    Filters: Optional[FilterList] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    SourceIdentifier: Optional[String] = None
    SourceType_1: Optional[SourceType] = Field(None, alias='SourceType')
    StartTime: Optional[TStamp] = None


class DescribeGlobalClustersMessage(BaseModel):
    Filters: Optional[FilterList] = None
    GlobalClusterIdentifier_1: Optional[GlobalClusterIdentifier] = Field(
        None, alias='GlobalClusterIdentifier'
    )
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None


class DescribeOrderableDBInstanceOptionsMessage(BaseModel):
    DBInstanceClass: Optional[String] = None
    Engine: String
    EngineVersion: Optional[String] = None
    Filters: Optional[FilterList] = None
    LicenseModel: Optional[String] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    Vpc: Optional[BooleanOptional] = None


class DescribePendingMaintenanceActionsMessage(BaseModel):
    Filters: Optional[FilterList] = None
    Marker: Optional[String] = None
    MaxRecords: Optional[IntegerOptional] = None
    ResourceIdentifier: Optional[String] = None


class GlobalCluster(BaseModel):
    DatabaseName: Optional[String] = None
    DeletionProtection: Optional[BooleanOptional] = None
    Engine: Optional[String] = None
    EngineVersion: Optional[String] = None
    GlobalClusterArn: Optional[String] = None
    GlobalClusterIdentifier_1: Optional[GlobalClusterIdentifier] = Field(
        None, alias='GlobalClusterIdentifier'
    )
    GlobalClusterMembers: Optional[GlobalClusterMemberList] = None
    GlobalClusterResourceId: Optional[String] = None
    Status: Optional[String] = None
    StorageEncrypted: Optional[BooleanOptional] = None


class GlobalClusterList(RootModel[List[GlobalCluster]]):
    root: List[GlobalCluster]


class GlobalClustersMessage(BaseModel):
    GlobalClusters: Optional[GlobalClusterList] = None
    Marker: Optional[String] = None


class ModifyDBInstanceResult(BaseModel):
    DBInstance_1: Optional[DBInstance] = Field(None, alias='DBInstance')


class ModifyGlobalClusterResult(BaseModel):
    GlobalCluster_1: Optional[GlobalCluster] = Field(None, alias='GlobalCluster')


class RebootDBInstanceResult(BaseModel):
    DBInstance_1: Optional[DBInstance] = Field(None, alias='DBInstance')


class RemoveFromGlobalClusterResult(BaseModel):
    GlobalCluster_1: Optional[GlobalCluster] = Field(None, alias='GlobalCluster')


class CreateDBInstanceResult(BaseModel):
    DBInstance_1: Optional[DBInstance] = Field(None, alias='DBInstance')


class CreateGlobalClusterResult(BaseModel):
    GlobalCluster_1: Optional[GlobalCluster] = Field(None, alias='GlobalCluster')


class DeleteGlobalClusterResult(BaseModel):
    GlobalCluster_1: Optional[GlobalCluster] = Field(None, alias='GlobalCluster')
